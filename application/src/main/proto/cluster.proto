/**
 * Thingsboard OÜ ("COMPANY") CONFIDENTIAL
 *
 * Copyright © 2016-2018 Thingsboard OÜ. All Rights Reserved.
 *
 * NOTICE: All information contained herein is, and remains
 * the property of Thingsboard OÜ and its suppliers,
 * if any.  The intellectual and technical concepts contained
 * herein are proprietary to Thingsboard OÜ
 * and its suppliers and may be covered by U.S. and Foreign Patents,
 * patents in process, and are protected by trade secret or copyright law.
 *
 * Dissemination of this information or reproduction of this material is strictly forbidden
 * unless prior written permission is obtained from COMPANY.
 *
 * Access to the source code contained herein is hereby forbidden to anyone except current COMPANY employees,
 * managers or contractors who have executed Confidentiality and Non-disclosure agreements
 * explicitly covering such access.
 *
 * The copyright notice above does not evidence any actual or intended publication
 * or disclosure  of  this source code, which includes
 * information that is confidential and/or proprietary, and is a trade secret, of  COMPANY.
 * ANY REPRODUCTION, MODIFICATION, DISTRIBUTION, PUBLIC  PERFORMANCE,
 * OR PUBLIC DISPLAY OF OR THROUGH USE  OF THIS  SOURCE CODE  WITHOUT
 * THE EXPRESS WRITTEN CONSENT OF COMPANY IS STRICTLY PROHIBITED,
 * AND IN VIOLATION OF APPLICABLE LAWS AND INTERNATIONAL TREATIES.
 * THE RECEIPT OR POSSESSION OF THIS SOURCE CODE AND/OR RELATED INFORMATION
 * DOES NOT CONVEY OR IMPLY ANY RIGHTS TO REPRODUCE, DISCLOSE OR DISTRIBUTE ITS CONTENTS,
 * OR TO MANUFACTURE, USE, OR SELL ANYTHING THAT IT  MAY DESCRIBE, IN WHOLE OR IN PART.
 */
syntax = "proto3";
package cluster;

option java_package = "org.thingsboard.server.gen.cluster";
option java_outer_classname = "ClusterAPIProtos";

message ServerAddress {
  string host = 1;
  int32 port = 2;
}

message Uid {
  sint64 pluginUuidMsb = 1;
  sint64 pluginUuidLsb = 2;
}

message PluginAddress {
  Uid pluginId = 1;
  Uid tenantId = 2;
}

message ToPluginRpcMessage {
  PluginAddress address = 1;
  int32 clazz = 2;
  bytes data = 3;
}

message ToDeviceActorRpcMessage {
  bytes data = 1;
}

message ToDeviceSessionActorRpcMessage {
  bytes data = 1;
}

message ToDeviceActorNotificationRpcMessage {
  bytes data = 1;
}

message ToAllNodesRpcMessage {
  bytes data = 1;
}

message ToIntegrationMessage {
  bytes data = 1;
}

message ConnectRpcMessage {
  ServerAddress serverAddress = 1;
}

message ToDeviceRpcRequestRpcMessage {
  PluginAddress address = 1;
  Uid deviceTenantId = 2;
  Uid deviceId = 3;

  Uid msgId = 4;
  bool oneway = 5;
  int64 expTime = 6;
  string method = 7;
  string params = 8;
}

message ToPluginRpcResponseRpcMessage {
  PluginAddress address = 1;

  Uid msgId = 2;
  string response = 3;
  string error = 4;
}

message ToRpcServerMessage {
  ConnectRpcMessage connectMsg = 1;
  ToPluginRpcMessage toPluginRpcMsg = 2;
  ToDeviceActorRpcMessage toDeviceActorRpcMsg = 3;
  ToDeviceSessionActorRpcMessage toDeviceSessionActorRpcMsg = 4;
  ToDeviceActorNotificationRpcMessage toDeviceActorNotificationRpcMsg = 5;
  ToAllNodesRpcMessage toAllNodesRpcMsg = 6;
  ToDeviceRpcRequestRpcMessage toDeviceRpcRequestRpcMsg = 7;
  ToPluginRpcResponseRpcMessage toPluginRpcResponseRpcMsg = 8;
  ToIntegrationMessage toIntegrationMsg = 9;
}

service ClusterRpcService {
  rpc handlePluginMsgs(stream ToRpcServerMessage) returns (stream ToRpcServerMessage) {}
}

