/**
 * Copyright Â© 2016-2021 The Thingsboard Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
syntax = "proto3";

option java_multiple_files = true;
option java_package = "org.thingsboard.server.gen.integration";
option java_outer_classname = "IntegrationProtos";

import "queue.proto";

package integration;

// Interface exported by the ThingsBoard Integration Transport.
service IntegrationTransport {

  rpc handleMsgs(stream RequestMsg) returns (stream ResponseMsg) {}

}

/**
 * Data Structures;
 */
message RequestMsg {
  MessageType messageType = 1;
  ConnectRequestMsg connectRequestMsg = 2;
  UplinkMsg uplinkMsg = 3;
}

message ResponseMsg {
  ConnectResponseMsg connectResponseMsg = 1;
  UplinkResponseMsg uplinkResponseMsg = 2;
  DownlinkMsg downlinkMsg = 3;
  IntegrationUpdateMsg integrationUpdateMsg = 4;
  ConverterUpdateMsg converterUpdateMsg = 5;
}

enum MessageType {
  CONNECT_RPC_MESSAGE = 0;
  UPLINK_RPC_MESSAGE = 1;
}

message IntegrationUpdateMsg {
  IntegrationConfigurationProto configuration = 1;
}

message ConverterUpdateMsg {
  ConverterConfigurationProto configuration = 1;
}

message ConnectRequestMsg {
  string integrationRoutingKey = 1;
  string integrationSecret = 2;
}

enum ConnectResponseCode {
  ACCEPTED = 0;
  BAD_CREDENTIALS = 1;
  SERVER_UNAVAILABLE = 2;
}

message ConnectResponseMsg {
  ConnectResponseCode responseCode = 1;
  string errorMsg = 2;
  IntegrationConfigurationProto configuration = 3;
}

message DeviceUplinkDataProto {
  string deviceName = 1;
  string deviceType = 2;
  string customerName = 3;
  string groupName = 4;
  transport.PostTelemetryMsg postTelemetryMsg = 5;
  transport.PostAttributeMsg postAttributesMsg = 6;
}

message AssetUplinkDataProto {
  string assetName = 1;
  string assetType = 2;
  string customerName = 3;
  string groupName = 4;
  transport.PostTelemetryMsg postTelemetryMsg = 5;
  transport.PostAttributeMsg postAttributesMsg = 6;
}

message EntityViewDataProto {
  string deviceName = 1;
  string deviceType = 2;
  string viewName = 3;
  string viewType = 4;
  repeated string telemetryKeys = 5;
}

message IntegrationStatisticsProto {
  transport.PostTelemetryMsg postTelemetryMsg = 1;
}

message DeviceDownlinkDataProto {
  string deviceName = 1;
  string deviceType = 2;
  bytes tbMsg = 3;
}

enum TbEventSource {
  INTEGRATION = 0;
  UPLINK_CONVERTER = 1;
  DOWNLINK_CONVERTER = 2;
  DEVICE = 3;
}

message TbEventProto {
  TbEventSource source = 1;
  string type = 2;
  string uid = 3;
  string data = 4;
  string deviceName = 5;
}

message IntegrationConfigurationProto {
  int64 tenantIdMSB = 1;
  int64 tenantIdLSB = 2;
  ConverterConfigurationProto uplinkConverter = 3;
  ConverterConfigurationProto downlinkConverter = 4;
  string name = 5;
  string routingKey = 6;
  string type = 7;
  bool debugMode = 8;
  string configuration = 9;
  string additionalInfo = 10;
  bool enabled = 11;
}

message UplinkProcessingResultProto {
  int32 uplinkMsgId = 1;
  bool success = 2;
  string errorMsg = 3;
}

message ConverterConfigurationProto {
  int64 tenantIdMSB = 1;
  int64 tenantIdLSB = 2;
  int64 converterIdMSB = 3;
  int64 converterIdLSB = 4;
  string name = 5;
  bool debugMode = 6;
  string configuration = 7;
  string additionalInfo = 8;
}

/**
 * Main Messages;
 */

message UplinkMsg {
  int32 uplinkMsgId = 1;
  repeated DeviceUplinkDataProto deviceData = 2;
  repeated EntityViewDataProto entityViewData = 3;
  repeated IntegrationStatisticsProto integrationStatistics = 4;
  repeated TbEventProto eventsData = 5;
  repeated bytes tbMsg = 6;
  repeated AssetUplinkDataProto assetData = 7;
}

message UplinkResponseMsg {
  bool success = 1;
  string errorMsg = 2;
}

message DownlinkMsg {
  DeviceDownlinkDataProto deviceData = 1;
}